#!/usr/bin/env bash
#+ Usage: ${script} [-h|--help|help] <src> <dest>
#+ .
#+ Sync images matching $FILTER from <src> job-board to <dest> job-board, where
#+ the <src> and <dest> should be the base URL, e.g.:
#+ .
#+     ${script} http://user:pass@src.example.org http://user:pass@dest.example.org
#+ .
#+ Influential env vars include:
#+ .
#+     FILTER - name filter used to select images (default: '^travis-ci')
#+     INFRA  - infrastructure name (default: 'gce')
#+ .

set -o errexit
set -o pipefail

main() {
  case "$*" in
    -h | --help)
      __usage
      exit 0
      ;;
  esac

  : "${TMPDIR:=/tmp}"

  local src="$1"
  local dest="$2"

  if [[ ! ${src} || ! ${dest} ]]; then
    echo "ERROR: missing positional argument(s)" >&2
    __usage
    exit 1
  fi

  __ensure_jq

  local infra="${INFRA:-gce}"
  local filter="${FILTER:-^travis-ci}"
  local tmpdir
  tmpdir="$(mktemp -d /var/tmp/job-board-sync.XXXXX)"

  trap 'rm -rf "${tmpdir}"' EXIT

  __dump_images "${src}" "${infra}" "${tmpdir}/dump-src.json"
  __dump_images "${dest}" "${infra}" "${tmpdir}/dump-dest.json"
  __upsert_dest "${dest}" "${infra}" "${tmpdir}" "${filter}"
  __delete_dest "${dest}" "${infra}" "${tmpdir}" "${filter}"
  exit 0
}

__usage() {
  local script
  script="$(basename "${0}")"
  awk "/^#\\+ / {
        sub(/#\\+ \\.?/, \"\", \$0) ;
        sub(/\\\${script}/, \"${script}\", \$0) ;
        print \$0
      }
    " <"${0}"
}

__dump_images() {
  local url="${1}"
  local infra="${2}"
  local tmpfile="${3}"

  echo "---> dumping to ${tmpfile}"
  if ! curl -sSL "${url}/images?infra=${infra}" >"${tmpfile}"; then
    echo "ERROR: failed to dump images from ${url}" >&2
    exit 1
  fi
}

__upsert_dest() {
  local dest="${1}"
  local infra="${2}"
  local tmpdir="${3}"
  local filter="${4}"

  echo "---> loading from ${tmpdir}/dump-src.json"
  for args in $(__json_to_qs "${filter}" <"${tmpdir}/dump-src.json"); do
    local name
    name=$(echo "${args}" | grep -oP 'name=\K[^&]+')
    if ! grep -q "\"name\":\"${name}\"" "${tmpdir}/dump-dest.json"; then
      (
        echo "syncing ${args}"
        if ! curl -fsSL -X PUT "${dest}/images?${args}"; then
          if ! curl -fsSL -X POST "${dest}/images?${args}"; then
            echo "ERROR: failed to sync ${args}" >&2
          fi
        fi
      ) 2>&1 | sed 's/^/     /'
    else
      echo "skipping ${name}, already exists in destination"
    fi
  done
}

__delete_dest() {
  local dest="${1}"
  local infra="${2}"
  local tmpdir="${3}"
  local filter="${4}"

  echo "---> loading from ${tmpdir}/dump-dest.json"
  for name in $(__json_to_name "${filter}" <"${tmpdir}/dump-dest.json"); do
    (
      local args="infra=${infra}&name=${name}"
      local src_name
      src_name="$(
        __json_by_infra_and_name \
          "${infra}" "${name}" <"${tmpdir}/dump-src.json" | jq -r '.name'
      )"
      if [[ "${src_name}" != "${name}" ]]; then
        echo "${name} not found in src, deleting from dest ${args}"
        if ! curl -fsSL -X DELETE "${dest}/images?${args}"; then
          echo "ERROR: failed to delete ${args}" >&2
        fi
      fi
    ) 2>&1 | sed 's/^/     /'
  done
}

__json_to_qs() {
  local filter="${1}"

  jq -r '.data[] | select(.name | test("'"${filter}"'")) |
    [
      "infra=" + .infra,
      "name=" + .name,
      "is_default=" + (.is_default | tostring),
      "tags=" + (.tags | to_entries | map(.key + ":" + .value) | join(","))
    ] | join("&")'
}

__json_to_name() {
  local filter="${1}"

  jq -r '.data[] | select(.name | test("'"${filter}"'")) | .name'
}

__json_by_infra_and_name() {
  local infra="${1}"
  local name="${2}"

  jq -r '.data[] | select(.infra == "'"${infra}"'") | select(.name == "'"${name}"'")'
}

__ensure_jq() {
  if jq --version; then
    return
  fi

  mkdir -p "${TMPDIR}/jq-bin"
  curl -sSL -o "${TMPDIR}/jq-bin/jq" \
    "https://github.com/stedolan/jq/releases/download/jq-1.7.1/jq-linux64"
  chmod +x "${TMPDIR}/jq-bin/jq"
  export PATH="${TMPDIR}/jq-bin:${PATH}"
}

main "$@"
